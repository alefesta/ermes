name: Ermes Main

on:
  issues:
    types: [opened]
env:
  BRANCH: ${{github.actor}}
jobs:
  Set-Up-Ermes:
    runs-on: ubuntu-latest
    # container: docker.io/hello-world
    steps:
      - uses: actions/github-script@v6
        id: set-branch-name
        with:
          script: |
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: '[EXECUTING] - ' + Date() + ' - ' + context.repo.owner
            });
      - name: Label issues
        uses: andymckay/labeler@e6c4322d0397f3240f0e7e30a33b5c5df2d39e90
        with:
          add-labels: "in Progress"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Print Body
      #   env:
      #     BODY: ${{ github.event.issue.body }}
      #     TITLE: ${{ github.event.issue.title }}
      #   run: |
      #     echo $BODY > input.txt
      #     if grep -i "- [x] Tensorflow Data Validation" input.txt
      #     then
      #         echo "yahyyy"
      #     else
      #         echo "nooooo"
      #     fi
      #     echo $TITLE
      # - name: View the github context
      #   run: echo "$GITHUB_CONTEXT"
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      - uses: actions/checkout@v2
      - name: Prepare Output Environment
        run: |
          mkdir -p shared
          touch shared/.images
          git config user.name ${{github.actor}}
          git add .
          git commit -m "Environment created"
          git push -f origin main
      # - run: OUT=$(python tfx_demo.py 2>&1) && echo $OUT > out.txt

      # - run: |
      #     for f in shared/*.png; do echo "::set-output name=body::https://github.com/${{ github.repository }}/blob/main/$f?raw=true"; done

      
      
  Executing-Code:
      needs: Set-Up-Ermes
      runs-on: ubuntu-latest
      outputs:
        body: ${{ steps.get-comment-body.outputs.body }}
      steps:
      - uses: actions/setup-python@v2
      - uses: actions/checkout@v2
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install -r requirements.txt
      - run: |
          git fetch
          git checkout 
          git pull
      - id: get-comment-body
        run: |
          body="$(python demo.py)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}" 
          echo "::set-output name=body::$body"
          git config user.name ${{github.actor}}
          git add .
          git commit -m "upload images"
          git push -f origin main

  Retrieving-Results:
      needs: Executing-Code
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.create-matrix.outputs.matrix }}
        body: ${{ steps.create-matrix.outputs.body }}
      steps:
      - uses: actions/checkout@v2
      - id: create-matrix
        run: |
          git fetch
          git checkout 
          git pull
          JSON="{\"include\":["
          for f in shared/*.png
          do 
            JSONline="{\"body\": \"https://github.com/${{ github.repository }}/blob/main/$f?raw=true,\"},"
              if [[ "$JSON" != *"$JSONline"* ]]
              then
                JSON="$JSON$JSONline"
              fi
          done
          # Remove last "," and add closing brackets
          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          JSON="$JSON]}"
          echo $JSON
          # set output
          body="${{needs.Executing-Code.outputs.body}}"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          echo "::set-output name=matrix::$( echo "$JSON" )"
          echo "::set-output name=body::$( echo "$body")"
      - name: Create Initial Comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{steps.create-matrix.outputs.body}}

  Publishing-Results:
      needs: Retrieving-Results
      runs-on: ubuntu-latest
      strategy:
        matrix: ${{fromJson(needs.Retrieving-Results.outputs.matrix)}}
      steps:
      - uses: actions/checkout@v2
      - name: Create Results Comments
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ![](${{ matrix.body }})
      - uses: actions/github-script@v6
        id: set-branch-name
        with:
          script: |
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: '[DONE] - ' + Date() + ' - ' + ${{github.rest.issues.user.login}}
            });
      - name: Label issues
        uses: andymckay/labeler@e6c4322d0397f3240f0e7e30a33b5c5df2d39e90
        with:
          add-labels: "done"
          remove-labels: "in Progress"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Commit files # transfer the new html files back into the repository
  #       uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.GH_WORKFLOW }}
  #     - run: |
  #         git config user.name github-actions
  #         git config user.email github-actions@github.com
  #         git checkout -b ${{github.actor}}
  #         cd .github/workflows && curl -O https://raw.githubusercontent.com/alefesta/ermes/main/test.yaml && mv test.yaml action.yaml
  #         git add .
  #         git commit -m "generated"
  #         git push --set-upstream origin ${{github.actor}}
  #     - name: Init
  #       run: echo 'The triggering workflow passed at $BRANCH'
  #     - name: Sync
  #       uses: actions/checkout@v2
  #     - run: |
  #         git fetch
  #         git checkout $BRANCH
  #         git pull
  #     - name: Create Initial Comment
  #       uses: peter-evans/create-or-update-comment@v1
  #       with:
  #         issue-number: ${{ github.event.issue.number }}
  #         body: |
  #           ## Ermes Execution Steps

  #           - [X] Branch created  as: [${{ github.workspace}}](${{ github.actor}})
      
  #     - name: Wait For It
  #       run: |
  #         sleep 3
  #     - name: Find Comment
  #       uses: peter-evans/find-comment@v1
  #       id: fc
  #       with:
  #         issue-number: ${{ github.event.issue.number }}
  #         comment-author: 'github-actions[bot]'
  #         body-includes: Ermes Execution Steps
  #     - name: Update comment
  #       if: steps.fc.outputs.comment-id != ''
  #       uses: peter-evans/create-or-update-comment@v1
  #       with:
  #         comment-id: ${{ steps.fc.outputs.comment-id }}
  #         body: |
  #           - [X] Scripts Installed

  # Execute-Code:
  #     needs: Set-Up-Ermes
  #     uses: alefesta/executor/.github/workflows/executor.yaml@main
  # Comment-Created:
  #   needs: Execute-Code
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Find Comment
  #     uses: peter-evans/find-comment@v1
  #     id: fc
  #     with:
  #       issue-number: ${{ github.event.issue.number }}
  #       comment-author: 'github-actions[bot]'
  #       body-includes: Ermes Execution Steps

  #   - name: Create comment
  #     if: steps.fc.outputs.comment-id == ''
  #     uses: peter-evans/create-or-update-comment@v1
  #     with:
  #       issue-number: ${{ github.event.issue.number }}
  #       body: |
  #         This comment was written by a bot!
  #       reactions: rocket

  #   - name: Update comment
  #     if: steps.fc.outputs.comment-id != ''
  #     uses: peter-evans/create-or-update-comment@v1
  #     with:
  #       comment-id: ${{ steps.fc.outputs.comment-id }}
  #       body: |
  #           - [X] Code Executed
  #       reactions: hooray
